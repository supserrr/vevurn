#!/bin/bash

# Quick Setup Script for Vevurn POS Development Environment
# This script helps set up your development environment quickly

set -e  # Exit on any error

echo "🚀 Setting up Vevurn POS Development Environment..."
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if required commands exist
check_dependencies() {
    print_info "Checking dependencies..."
    
    commands=("node" "pnpm" "psql" "redis-cli")
    missing_deps=()
    
    for cmd in "${commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing dependencies: ${missing_deps[*]}"
        echo ""
        echo "Please install the following:"
        echo "- Node.js (v18+): https://nodejs.org/"
        echo "- pnpm: npm install -g pnpm"
        echo "- PostgreSQL: https://postgresql.org/"
        echo "- Redis: https://redis.io/"
        exit 1
    fi
    
    print_status "All dependencies found!"
}

# Generate random secrets
generate_secrets() {
    print_info "Generating secure secrets..."
    
    BETTER_AUTH_SECRET=$(openssl rand -base64 32 2>/dev/null || echo "your-32-character-secret-here-$(date +%s)")
    JWT_SECRET=$(openssl rand -base64 32 2>/dev/null || echo "your-jwt-secret-$(date +%s)")
    JWT_REFRESH_SECRET=$(openssl rand -base64 32 2>/dev/null || echo "your-refresh-secret-$(date +%s)")
    
    print_status "Secrets generated!"
}

# Setup backend environment
setup_backend_env() {
    print_info "Setting up backend environment..."
    
    if [ -f "backend/.env" ]; then
        print_warning "backend/.env already exists. Backing up to backend/.env.backup"
        cp backend/.env backend/.env.backup
    fi
    
    # Create backend .env file
    cat > backend/.env << EOF
# Generated by setup script on $(date)

# Application Settings
NODE_ENV=development
PORT=3001
FRONTEND_URL=http://localhost:3000
BACKEND_URL=http://localhost:3001

# Database Configuration
DATABASE_URL="postgresql://postgres:password@localhost:5432/vevurn_pos"

# Redis Configuration
REDIS_URL="redis://localhost:6379"

# Better Auth Configuration
BETTER_AUTH_SECRET="$BETTER_AUTH_SECRET"
BETTER_AUTH_URL="http://localhost:3001"

# JWT Settings
JWT_SECRET="$JWT_SECRET"
JWT_REFRESH_SECRET="$JWT_REFRESH_SECRET"
JWT_EXPIRE="24h"

# Development Settings
LOG_LEVEL="info"
ENABLE_SWAGGER="true"
ENABLE_CORS="true"
ENABLE_RATE_LIMITING="true"

# Optional: AWS S3 Configuration (uncomment and fill if needed)
# AWS_REGION="us-east-1"
# AWS_ACCESS_KEY_ID="your-aws-access-key-id"
# AWS_SECRET_ACCESS_KEY="your-aws-secret-access-key"
# AWS_S3_BUCKET="vevurn-pos-storage"

# Optional: Email Configuration (uncomment and fill if needed)
# SMTP_HOST="smtp.gmail.com"
# SMTP_PORT="587"
# SMTP_USER="your-email@gmail.com"
# SMTP_PASS="your-app-password"
# FROM_EMAIL="noreply@vevurn.com"
EOF
    
    print_status "Backend .env file created!"
}

# Setup frontend environment
setup_frontend_env() {
    print_info "Setting up frontend environment..."
    
    if [ -f "frontend/.env.local" ]; then
        print_warning "frontend/.env.local already exists. Backing up to frontend/.env.local.backup"
        cp frontend/.env.local frontend/.env.local.backup
    fi
    
    # Create frontend .env.local file
    cat > frontend/.env.local << EOF
# Generated by setup script on $(date)

# Application Settings
NODE_ENV=development
PORT=3000

# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:3001
NEXT_PUBLIC_WS_URL=ws://localhost:3001
BETTER_AUTH_URL=http://localhost:3001

# App Configuration
NEXT_PUBLIC_APP_NAME=Vevurn POS
NEXT_PUBLIC_APP_VERSION=1.0.0
NEXT_PUBLIC_APP_ENV=development

# Feature Flags
NEXT_PUBLIC_ENABLE_FILE_UPLOADS=true
NEXT_PUBLIC_ENABLE_NOTIFICATIONS=true
NEXT_PUBLIC_ENABLE_PWA=true
NEXT_PUBLIC_DEBUG_MODE=true
NEXT_PUBLIC_MOCK_API=false

# Optional: Analytics (uncomment and fill if needed)
# NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
# NEXT_PUBLIC_SENTRY_DSN=https://your-dsn@sentry.io/project-id
EOF
    
    print_status "Frontend .env.local file created!"
}

# Install dependencies
install_dependencies() {
    print_info "Installing dependencies..."
    
    # Install root dependencies
    if [ -f "package.json" ]; then
        pnpm install
    fi
    
    # Install backend dependencies
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        cd backend
        pnpm install
        cd ..
    fi
    
    # Install frontend dependencies  
    if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
        cd frontend
        pnpm install
        cd ..
    fi
    
    print_status "Dependencies installed!"
}

# Setup database
setup_database() {
    print_info "Setting up database..."
    
    # Check if PostgreSQL is running
    if ! pg_isready -h localhost -p 5432 &> /dev/null; then
        print_warning "PostgreSQL is not running. Please start PostgreSQL first."
        print_info "You can start it with: brew services start postgresql"
        return 1
    fi
    
    # Create database if it doesn't exist
    createdb vevurn_pos 2>/dev/null || print_warning "Database 'vevurn_pos' may already exist"
    
    # Run migrations
    if [ -d "backend" ]; then
        cd backend
        if command -v prisma &> /dev/null; then
            pnpm prisma generate
            pnpm prisma db push
            print_status "Database migrations completed!"
        else
            print_warning "Prisma not found. Run 'cd backend && pnpm prisma generate && pnpm prisma db push' manually"
        fi
        cd ..
    fi
}

# Setup Redis
setup_redis() {
    print_info "Checking Redis..."
    
    if ! redis-cli ping &> /dev/null; then
        print_warning "Redis is not running. Please start Redis first."
        print_info "You can start it with: brew services start redis"
        return 1
    fi
    
    print_status "Redis is running!"
}

# Print completion message
print_completion() {
    echo ""
    echo "🎉 Development Environment Setup Complete!"
    echo "========================================"
    echo ""
    print_status "Environment files created:"
    echo "  - backend/.env"
    echo "  - frontend/.env.local"
    echo ""
    print_status "Next steps:"
    echo "  1. Start your development servers:"
    echo "     Terminal 1: cd backend && pnpm dev"
    echo "     Terminal 2: cd frontend && pnpm dev"
    echo ""
    echo "  2. Open your applications:"
    echo "     Frontend: http://localhost:3000"
    echo "     Backend API: http://localhost:3001"
    echo "     Health Check: http://localhost:3001/health"
    echo ""
    print_info "For production deployment, see docs/RENDER_DEPLOYMENT.md"
    echo ""
}

# Error handler
handle_error() {
    print_error "Setup failed at step: $1"
    echo "Please check the error messages above and try again."
    echo "For help, see docs/ENVIRONMENT_SETUP.md"
    exit 1
}

# Main execution
main() {
    # Trap errors
    trap 'handle_error "Unknown"' ERR
    
    check_dependencies || handle_error "Dependency Check"
    generate_secrets || handle_error "Secret Generation"
    setup_backend_env || handle_error "Backend Environment"
    setup_frontend_env || handle_error "Frontend Environment"
    install_dependencies || handle_error "Dependency Installation"
    setup_database || handle_error "Database Setup"
    setup_redis || handle_error "Redis Setup"
    
    print_completion
}

# Check if script is being run from the correct directory
if [ ! -f "render.yaml" ] || [ ! -d "backend" ] || [ ! -d "frontend" ]; then
    print_error "Please run this script from the root of your Vevurn POS project"
    exit 1
fi

# Run main function
main "$@"
