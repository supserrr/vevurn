generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  name            String
  email           String     @unique
  emailVerified   Boolean    @default(false)
  image           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  role            UserRole   @default(CASHIER)
  isActive        Boolean    @default(true)
  lastLoginAt     DateTime?
  employeeId      String?    @unique
  phoneNumber     String?
  department      String?
  hireDate        DateTime?
  salary          Decimal?   @db.Decimal(10, 2)
  accounts        Account[]
  auditLogs       AuditLog[]
  createdProducts Product[]  @relation("CreatedBy")
  updatedProducts Product[]  @relation("UpdatedBy")
  sales           Sale[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Supplier {
  id             String          @id @default(cuid())
  name           String          @unique
  contactName    String?
  email          String?
  phone          String?
  address        String?
  taxNumber      String?
  paymentTerms   String?
  notes          String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  products       Product[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model Product {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  sku                String              @unique
  barcode            String?             @unique
  categoryId         String
  supplierId         String?
  costPrice          Decimal             @db.Decimal(10, 2)
  wholesalePrice     Decimal             @db.Decimal(10, 2)
  retailPrice        Decimal             @db.Decimal(10, 2)
  minPrice           Decimal             @db.Decimal(10, 2)
  stockQuantity      Int                 @default(0)
  minStockLevel      Int                 @default(0)
  maxStockLevel      Int?
  reorderPoint       Int                 @default(0)
  brand              String?
  model              String?
  color              String?
  size               String?
  weight             Decimal?            @db.Decimal(8, 3)
  dimensions         String?
  status             ProductStatus       @default(ACTIVE)
  isConsignment      Boolean             @default(false)
  consignmentRate    Decimal?            @db.Decimal(5, 2)
  tags               String[]            @default([])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  createdById        String
  updatedById        String?
  deletedAt          DateTime?
  inventoryMovements InventoryMovement[]
  images             ProductImage[]
  variations         ProductVariation[]
  category           Category            @relation(fields: [categoryId], references: [id])
  createdBy          User                @relation("CreatedBy", fields: [createdById], references: [id])
  supplier           Supplier?           @relation(fields: [supplierId], references: [id])
  updatedBy          User?               @relation("UpdatedBy", fields: [updatedById], references: [id])
  purchaseOrderItems PurchaseOrderItem[]
  saleItems          SaleItem[]

  @@map("products")
}

model ProductVariation {
  id             String     @id @default(cuid())
  productId      String
  name           String
  sku            String     @unique
  barcode        String?    @unique
  attributes     Json
  costPrice      Decimal?   @db.Decimal(10, 2)
  wholesalePrice Decimal?   @db.Decimal(10, 2)
  retailPrice    Decimal?   @db.Decimal(10, 2)
  minPrice       Decimal?   @db.Decimal(10, 2)
  stockQuantity  Int        @default(0)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  saleItems      SaleItem[]

  @@map("product_variations")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Customer {
  id                     String         @id @default(cuid())
  firstName              String
  lastName               String?
  email                  String?        @unique
  phone                  String?        @unique
  address                String?
  city                   String?
  dateOfBirth            DateTime?
  gender                 String?
  totalSpent             Decimal        @default(0) @db.Decimal(12, 2)
  totalPurchases         Int            @default(0)
  lastPurchaseAt         DateTime?
  preferredPaymentMethod PaymentMethod?
  notes                  String?
  tags                   String[]       @default([])
  isActive               Boolean        @default(true)
  
  // Additional billing fields
  companyName            String?        // For business customers
  taxNumber              String?        // Business tax number
  billingAddress         String?        // Separate billing address
  paymentTerms           String?        // Default payment terms
  creditLimit            Decimal?       @db.Decimal(12, 2)
  
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  deletedAt              DateTime?
  sales                  Sale[]
  
  // Invoice relation
  invoices               Invoice[]

  @@map("customers")
}

model Sale {
  id             String     @id @default(cuid())
  saleNumber     String     @unique
  customerId     String?
  cashierId      String
  subtotal       Decimal    @db.Decimal(12, 2)
  taxAmount      Decimal    @default(0) @db.Decimal(12, 2)
  discountAmount Decimal    @default(0) @db.Decimal(12, 2)
  totalAmount    Decimal    @db.Decimal(12, 2)
  amountPaid     Decimal    @default(0) @db.Decimal(12, 2)
  amountDue      Decimal    @default(0) @db.Decimal(12, 2)
  changeAmount   Decimal    @default(0) @db.Decimal(12, 2)
  status         SaleStatus @default(DRAFT)
  notes          String?
  receiptPrinted Boolean    @default(false)
  
  // Invoice related fields
  isInvoiced     Boolean    @default(false)
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  completedAt    DateTime?
  cancelledAt    DateTime?
  payments       Payment[]
  items          SaleItem[]
  cashier        User       @relation(fields: [cashierId], references: [id])
  customer       Customer?  @relation(fields: [customerId], references: [id])
  
  // Invoice relation
  invoice        Invoice?

  @@map("sales")
}

model SaleItem {
  id                 String            @id @default(cuid())
  saleId             String
  productId          String
  productVariationId String?
  quantity           Int
  unitPrice          Decimal           @db.Decimal(10, 2)
  discountAmount     Decimal           @default(0) @db.Decimal(10, 2)
  totalPrice         Decimal           @db.Decimal(12, 2)
  unitCost           Decimal           @db.Decimal(10, 2)
  totalCost          Decimal           @db.Decimal(12, 2)
  notes              String?
  isConsignment      Boolean           @default(false)
  consignmentRate    Decimal?          @db.Decimal(5, 2)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  product            Product           @relation(fields: [productId], references: [id])
  productVariation   ProductVariation? @relation(fields: [productVariationId], references: [id])
  sale               Sale              @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model Payment {
  id              String         @id @default(cuid())
  saleId          String?
  amount          Decimal        @db.Decimal(12, 2)
  method          PaymentMethod
  status          PaymentStatus  @default(PENDING)
  transactionId   String?        @unique
  referenceNumber String?
  momoPhoneNumber String?
  bankAccount     String?
  momoRequestId   String?
  momoStatus      String?
  changeGiven     Decimal?       @db.Decimal(12, 2)
  changeMethod    PaymentMethod?
  notes           String?
  receiptNumber   String?
  processedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  sale            Sale?          @relation(fields: [saleId], references: [id])

  @@map("payments")
}

model InventoryMovement {
  id            String           @id @default(cuid())
  productId     String
  type          MovementType
  quantity      Int
  unitPrice     Decimal?         @db.Decimal(10, 2)
  totalValue    Decimal?         @db.Decimal(12, 2)
  referenceType TransactionType?
  referenceId   String?
  reason        String?
  notes         String?
  stockBefore   Int
  stockAfter    Int
  createdAt     DateTime         @default(now())
  createdBy     String?
  product       Product          @relation(fields: [productId], references: [id])

  @@map("inventory_movements")
}

model PurchaseOrder {
  id           String              @id @default(cuid())
  orderNumber  String              @unique
  supplierId   String
  subtotal     Decimal             @db.Decimal(12, 2)
  taxAmount    Decimal             @default(0) @db.Decimal(12, 2)
  totalAmount  Decimal             @db.Decimal(12, 2)
  status       String              @default("PENDING")
  orderDate    DateTime            @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  items        PurchaseOrderItem[]
  supplier     Supplier            @relation(fields: [supplierId], references: [id])

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  productId        String
  quantity         Int
  unitPrice        Decimal       @db.Decimal(10, 2)
  totalPrice       Decimal       @db.Decimal(12, 2)
  quantityReceived Int           @default(0)
  receivedAt       DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  product          Product       @relation(fields: [productId], references: [id])
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@map("purchase_order_items")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  action       String
  resourceType String
  resourceId   String?
  oldValues    Json?
  newValues    Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique // INV-2025-0001
  saleId        String        @unique
  customerId    String
  
  // Invoice details
  subtotal      Decimal       @db.Decimal(12, 2)
  taxAmount     Decimal       @default(0) @db.Decimal(12, 2)
  discountAmount Decimal      @default(0) @db.Decimal(12, 2)
  totalAmount   Decimal       @db.Decimal(12, 2)
  amountPaid    Decimal       @default(0) @db.Decimal(12, 2)
  amountDue     Decimal       @db.Decimal(12, 2)
  
  // Invoice status
  status        InvoiceStatus @default(DRAFT)
  
  // Dates
  issueDate     DateTime      @default(now())
  dueDate       DateTime      // Payment due date
  paidDate      DateTime?     // When fully paid
  
  // Consignment specific
  isConsignment Boolean       @default(false)
  consignmentDue Decimal?     @db.Decimal(12, 2) // Amount owed to consigner
  
  // Communication
  emailSent     Boolean       @default(false)
  emailSentAt   DateTime?
  smsSent       Boolean       @default(false)
  smsSentAt     DateTime?
  
  // Payment terms
  paymentTerms  String?       // "Net 30", "Due on receipt", etc.
  notes         String?
  
  // Tracking
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  sale          Sale          @relation(fields: [saleId], references: [id])
  customer      Customer      @relation(fields: [customerId], references: [id])
  reminders     InvoiceReminder[]
  
  @@map("invoices")
}

model InvoiceReminder {
  id         String   @id @default(cuid())
  invoiceId  String
  
  // Reminder details  
  type       ReminderType // EMAIL, SMS, CALL
  message    String
  
  // Status
  sent       Boolean  @default(false)
  sentAt     DateTime?
  
  // Scheduling
  scheduledFor DateTime
  
  createdAt  DateTime @default(now())
  
  // Relations
  invoice    Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@map("invoice_reminders")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("STRING")
  category    String   @default("GENERAL")
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model DailyReport {
  id                 String   @id @default(cuid())
  date               DateTime @unique @db.Date
  totalSales         Decimal  @db.Decimal(12, 2)
  totalTransactions  Int
  averageTransaction Decimal  @db.Decimal(10, 2)
  cashSales          Decimal  @db.Decimal(12, 2)
  momoSales          Decimal  @db.Decimal(12, 2)
  bankSales          Decimal  @db.Decimal(12, 2)
  creditSales        Decimal  @db.Decimal(12, 2)
  openingCash        Decimal  @db.Decimal(12, 2)
  closingCash        Decimal  @db.Decimal(12, 2)
  openingMomo        Decimal  @db.Decimal(12, 2)
  closingMomo        Decimal  @db.Decimal(12, 2)
  generatedAt        DateTime @default(now())
  generatedBy        String?

  @@map("daily_reports")
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

enum PaymentMethod {
  CASH
  MOBILE_MONEY
  BANK_TRANSFER
  CREDIT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum SaleStatus {
  DRAFT
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum MovementType {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
  TRANSFER
  DAMAGED
  EXPIRED
}

enum TransactionType {
  SALE
  PURCHASE
  ADJUSTMENT
  REFUND
}

enum InvoiceStatus {
  DRAFT          // Not yet sent to customer
  SENT           // Sent to customer, awaiting payment
  OVERDUE        // Past due date
  PARTIALLY_PAID // Partial payment received
  PAID           // Fully paid
  CANCELLED      // Cancelled/voided
  REFUNDED       // Refunded
}

enum ReminderType {
  EMAIL
  SMS  
  CALL
  WHATSAPP
}
