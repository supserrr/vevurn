// Vevurn POS System Database Schema
// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// AUTHENTICATION & USER MANAGEMENT (Better Auth Compatible)
// =============================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  image         String?
  firstName     String?
  lastName      String?
  role          String   @default("cashier") // Changed from enum to string for better-auth compatibility
  isActive      Boolean  @default(true)
  employeeId    String?  @unique
  
  // Discount permissions for flexible pricing
  maxDiscountAllowed  Float   @default(5.0)   // Maximum discount percentage this staff can give
  canSellBelowMin     Boolean @default(false) // Can sell below minimum price without approval
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Better-auth relations
  sessions              Session[]
  accounts              Account[]
  
  // POS system relations
  sales                        Sale[]
  auditLogs                   AuditLog[]
  stockMovements              StockMovement[]
  approvedDiscounts           SaleItem[] @relation("ApprovedBy")
  requestedDiscounts          DiscountApproval[] @relation("RequestedDiscounts")
  approvedDiscountRequests    DiscountApproval[] @relation("ApprovedDiscountRequests")
  
  @@map("users")
}

// Better-auth required models
model Session {
  id             String    @id @default(cuid())
  userId         String
  expiresAt      DateTime
  token          String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?   // For admin impersonation
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Account {
  id                     String    @id @default(cuid())
  userId                 String
  accountId              String
  providerId             String
  accessToken            String?
  refreshToken           String?
  idToken                String?
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  
  @@map("verifications")
}

// Legacy UserRole enum - kept for reference but not used in User model anymore
enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  VIEWER
}

// =============================================
// PRODUCT & INVENTORY MANAGEMENT
// =============================================

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  isActive    Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  products Product[]
  
  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  sku         String  @unique
  barcode     String? @unique
  brand       String?
  model       String?
  color       String?
  
  // Flexible Pricing System (RWF - Primary Currency)
  basePriceRwf         Float   // Standard selling price
  minPriceRwf          Float   // Minimum allowed selling price
  maxDiscountPercent   Float   @default(0) // Maximum discount allowed on this product
  wholesalePriceRwf    Float?  // Price for consignment/wholesale
  
  // Multi-currency support (USD)
  basePriceUsd         Float?
  minPriceUsd          Float?
  wholesalePriceUsd    Float?
  
  // Multi-currency support (EUR)
  basePriceEur         Float?
  minPriceEur          Float?
  wholesalePriceEur    Float?
  
  // Legacy pricing (will be migrated to basePriceRwf)
  priceRwf Float?
  priceUsd Float?
  priceEur Float?
  costPrice Float?
  
  // Inventory
  stockQuantity    Int     @default(0)
  minStockLevel    Int     @default(0)
  maxStockLevel    Int?
  reorderPoint     Int     @default(0)
  isActive         Boolean @default(true)
  isTrackInventory Boolean @default(true)
  
  // Product specifications
  specifications Json?
  
  // Images and media
  images String[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     String
  saleItems      SaleItem[]
  stockMovements StockMovement[]
  suppliers      ProductSupplier[]
  
  @@index([sku])
  @@index([barcode])
  @@index([categoryId])
  @@map("products")
}

model Supplier {
  id      String  @id @default(cuid())
  name    String  @unique
  contact String?
  email   String?
  phone   String?
  address String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  products ProductSupplier[]
  
  @@map("suppliers")
}

model ProductSupplier {
  id         String @id @default(cuid())
  product    Product @relation(fields: [productId], references: [id])
  productId  String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId String
  
  supplierSku   String?
  supplierPrice Float?
  leadTimeDays  Int?
  minOrderQty   Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([productId, supplierId])
  @@map("product_suppliers")
}

// =============================================
// SALES & TRANSACTIONS
// =============================================

model Sale {
  id            String     @id @default(cuid())
  receiptNumber String     @unique
  
  // Customer information
  customerName  String?
  customerPhone String?
  customerEmail String?
  
  // Sale totals (all in selected currency)
  currency      Currency   @default(RWF)
  subtotal      Float
  taxAmount     Float      @default(0)
  discountAmount Float     @default(0)
  totalAmount   Float
  
  // Payment information
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paidAmount    Float         @default(0)
  changeAmount  Float         @default(0)
  
  // MTN Mobile Money details (if applicable)
  mtnTransactionId String?
  mtnStatus        String?
  
  // Staff and commission
  cashier      User   @relation(fields: [cashierId], references: [id])
  cashierId    String
  staffNotes   String?
  commission   Float? @default(0)
  
  // Sale status and tracking
  status    SaleStatus @default(COMPLETED)
  isVoided  Boolean    @default(false)
  voidReason String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  items     SaleItem[]
  payments  Payment[]
  auditLogs AuditLog[]
  
  @@index([receiptNumber])
  @@index([cashierId])
  @@index([createdAt])
  @@index([paymentStatus])
  @@map("sales")
}

model SaleItem {
  id       String @id @default(cuid())
  sale     Sale   @relation(fields: [saleId], references: [id])
  saleId   String
  product  Product @relation(fields: [productId], references: [id])
  productId String
  
  quantity         Int
  basePrice        Float  // Original base price at time of sale
  negotiatedPrice  Float  // Final price after negotiation
  totalPrice       Float  // negotiatedPrice * quantity
  
  // Discount tracking
  discountAmount      Float  @default(0) // basePrice - negotiatedPrice
  discountPercentage  Float  @default(0) // Calculated percentage
  discountReason      String @default("none") // Reason for discount
  
  // Approval tracking for below-minimum sales
  approvedBy    String? // User ID who approved below-minimum sale
  approver      User?   @relation("ApprovedBy", fields: [approvedBy], references: [id])
  approvalNotes String?
  
  // Legacy discount field (will be deprecated)
  discount    Float @default(0)
  
  // Product snapshot at time of sale
  productName String
  productSku  String
  
  createdAt DateTime @default(now())
  
  @@index([saleId])
  @@index([productId])
  @@map("sale_items")
}

model Payment {
  id              String        @id @default(cuid())
  sale            Sale          @relation(fields: [saleId], references: [id])
  saleId          String
  
  amount          Float
  paymentMethod   PaymentMethod
  currency        Currency
  
  // MTN Mobile Money specific
  mtnPhoneNumber    String?
  mtnTransactionId  String?
  mtnStatus         String?
  mtnReferenceId    String?
  
  // Bank transfer specific
  bankReference     String?
  bankAccount       String?
  
  status          PaymentStatus @default(PENDING)
  processedAt     DateTime?
  failureReason   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([saleId])
  @@map("payments")
}

// =============================================
// CUSTOMER & LOAN MANAGEMENT
// =============================================

model DiscountApproval {
  id            String         @id @default(cuid())
  
  // Request details
  requestedBy   User           @relation("RequestedDiscounts", fields: [requestedById], references: [id])
  requestedById String
  
  // Sale information
  saleId        String?        // If part of a sale
  productId     String
  productName   String
  productSku    String
  
  // Pricing details
  basePrice         Float
  requestedPrice    Float
  minimumPrice      Float
  discountAmount    Float
  discountPercent   Float
  
  // Request details
  reason            String
  customerContext   String?
  businessCase      String?
  
  // Approval workflow
  status            ApprovalStatus @default(PENDING)
  approvedBy        String?
  approver          User?          @relation("ApprovedDiscountRequests", fields: [approvedBy], references: [id])
  approvalNotes     String?
  approvedAt        DateTime?
  
  // Metadata
  currency          Currency       @default(RWF)
  quantity          Int            @default(1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([requestedById])
  @@index([approvedBy])
  @@index([createdAt])
  @@map("discount_approvals")
}

model Customer {
  id      String  @id @default(cuid())
  name    String
  phone   String? @unique
  email   String? @unique
  address String?
  
  // Photo documentation
  photoUrl String?
  
  // Customer status
  isActive       Boolean @default(true)
  creditLimit    Float   @default(0)
  currentBalance Float   @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  loans     Loan[]
  auditLogs AuditLog[]
  
  @@index([phone])
  @@index([email])
  @@map("customers")
}

model Loan {
  id         String @id @default(cuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  
  // Loan details
  principalAmount Float
  interestRate    Float    @default(0)
  totalAmount     Float
  paidAmount      Float    @default(0)
  remainingAmount Float
  currency        Currency @default(RWF)
  
  // Loan terms
  dueDate     DateTime
  status      LoanStatus @default(ACTIVE)
  notes       String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  payments  LoanPayment[]
  auditLogs AuditLog[]
  
  @@index([customerId])
  @@index([status])
  @@index([dueDate])
  @@map("loans")
}

model LoanPayment {
  id       String @id @default(cuid())
  loan     Loan   @relation(fields: [loanId], references: [id])
  loanId   String
  
  amount        Float
  currency      Currency @default(RWF)
  paymentMethod PaymentMethod
  receiptNumber String?
  notes         String?
  
  createdAt DateTime @default(now())
  
  @@index([loanId])
  @@map("loan_payments")
}

// =============================================
// INVENTORY & STOCK MANAGEMENT
// =============================================

model StockMovement {
  id        String @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  
  type        MovementType
  quantity    Int
  unitCost    Float?
  totalCost   Float?
  reason      String?
  reference   String? // Could be sale ID, purchase order, etc.
  
  // Stock levels after movement
  stockBefore Int
  stockAfter  Int
  
  createdAt DateTime @default(now())
  
  @@index([productId])
  @@index([type])
  @@index([createdAt])
  @@map("stock_movements")
}

// =============================================
// AUDIT & MONITORING
// =============================================

model AuditLog {
  id       String @id @default(cuid())
  user     User?  @relation(fields: [userId], references: [id])
  userId   String?
  
  action      String
  entity      String // Product, Sale, Customer, etc.
  entityId    String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  
  // Related entities
  sale       Sale?     @relation(fields: [saleId], references: [id])
  saleId     String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  loan       Loan?     @relation(fields: [loanId], references: [id])
  loanId     String?
  
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model SystemAlert {
  id          String      @id @default(cuid())
  type        AlertType
  severity    AlertSeverity @default(INFO)
  title       String
  message     String
  isRead      Boolean     @default(false)
  isResolved  Boolean     @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  
  // Alert metadata
  metadata    Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([type])
  @@index([severity])
  @@index([isRead])
  @@index([createdAt])
  @@map("system_alerts")
}

// =============================================
// ENUMS
// =============================================

enum Currency {
  RWF // Rwandan Franc
  USD // US Dollar
  EUR // Euro
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MTN_MOBILE_MONEY
  CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum SaleStatus {
  DRAFT
  COMPLETED
  CANCELLED
  REFUNDED
}

enum LoanStatus {
  ACTIVE
  PAID
  OVERDUE
  CANCELLED
  WRITTEN_OFF
}

enum MovementType {
  SALE          // Stock decrease from sale
  RESTOCK       // Stock increase from purchase
  ADJUSTMENT    // Manual stock adjustment
  DAMAGE        // Stock decrease due to damage
  RETURN        // Stock increase from return
  TRANSFER      // Stock transfer between locations
}

enum AlertType {
  LOW_STOCK
  SYSTEM_ERROR
  PAYMENT_FAILED
  LOAN_OVERDUE
  SECURITY_ISSUE
  BACKUP_FAILED
}

enum AlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}
