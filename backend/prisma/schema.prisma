// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// BETTER AUTH CORE TABLES
// ==========================================

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Better Auth additional fields
  role        UserRole  @default(CASHIER)
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?

  // POS specific fields
  employeeId  String?   @unique
  phoneNumber String?
  department  String?
  hireDate    DateTime?
  salary      Decimal?  @db.Decimal(10, 2)

  // Relations
  accounts        Account[]
  sessions        Session[]
  sales           Sale[]
  auditLogs       AuditLog[]
  createdProducts Product[]  @relation("CreatedBy")
  updatedProducts Product[]  @relation("UpdatedBy")

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

// ==========================================
// ENUMS
// ==========================================

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}

enum PaymentMethod {
  CASH
  MOBILE_MONEY
  BANK_TRANSFER
  CREDIT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum SaleStatus {
  DRAFT
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum MovementType {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
  TRANSFER
  DAMAGED
  EXPIRED
}

enum TransactionType {
  SALE
  PURCHASE
  ADJUSTMENT
  REFUND
}

// ==========================================
// PRODUCT MANAGEMENT
// ==========================================

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Supplier {
  id           String   @id @default(cuid())
  name         String   @unique
  contactName  String?
  email        String?
  phone        String?
  address      String?
  taxNumber    String?
  paymentTerms String?
  notes        String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  products       Product[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  sku         String  @unique
  barcode     String? @unique
  categoryId  String
  supplierId  String?

  // Pricing
  costPrice      Decimal @db.Decimal(10, 2)
  wholesalePrice Decimal @db.Decimal(10, 2)
  retailPrice    Decimal @db.Decimal(10, 2)
  minPrice       Decimal @db.Decimal(10, 2) // Minimum selling price

  // Inventory
  stockQuantity Int  @default(0)
  minStockLevel Int  @default(0)
  maxStockLevel Int?
  reorderPoint  Int  @default(0)

  // Product details
  brand      String?
  model      String?
  color      String?
  size       String?
  weight     Decimal? @db.Decimal(8, 3)
  dimensions String?

  // Metadata
  status          ProductStatus @default(ACTIVE)
  isConsignment   Boolean       @default(false)
  consignmentRate Decimal?      @db.Decimal(5, 2) // Commission percentage
  tags            String[]      @default([])

  // Tracking
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  updatedById String?
  deletedAt   DateTime?

  // Relations
  category           Category            @relation(fields: [categoryId], references: [id])
  supplier           Supplier?           @relation(fields: [supplierId], references: [id])
  createdBy          User                @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy          User?               @relation("UpdatedBy", fields: [updatedById], references: [id])
  variations         ProductVariation[]
  images             ProductImage[]
  saleItems          SaleItem[]
  purchaseOrderItems PurchaseOrderItem[]
  inventoryMovements InventoryMovement[]

  @@map("products")
}

model ProductVariation {
  id        String  @id @default(cuid())
  productId String
  name      String // e.g., "iPhone 15 Pro - Blue - 128GB"
  sku       String  @unique
  barcode   String? @unique

  // Variation attributes
  attributes Json // Flexible JSON for color, size, model, etc.

  // Pricing (can override product pricing)
  costPrice      Decimal? @db.Decimal(10, 2)
  wholesalePrice Decimal? @db.Decimal(10, 2)
  retailPrice    Decimal? @db.Decimal(10, 2)
  minPrice       Decimal? @db.Decimal(10, 2)

  // Inventory
  stockQuantity Int @default(0)

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  saleItems SaleItem[]

  @@map("product_variations")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// ==========================================
// CUSTOMER MANAGEMENT
// ==========================================

model Customer {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String?
  email       String?   @unique
  phone       String?   @unique
  address     String?
  city        String?
  dateOfBirth DateTime?
  gender      String?

  // Customer metrics
  totalSpent     Decimal   @default(0) @db.Decimal(12, 2)
  totalPurchases Int       @default(0)
  lastPurchaseAt DateTime?

  // Preferences
  preferredPaymentMethod PaymentMethod?
  notes                  String?
  tags                   String[]       @default([])

  // Tracking
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  sales Sale[]

  @@map("customers")
}

// ==========================================
// SALES MANAGEMENT
// ==========================================

model Sale {
  id         String  @id @default(cuid())
  saleNumber String  @unique // Auto-generated sale number
  customerId String?
  cashierId  String

  // Sale details
  subtotal       Decimal @db.Decimal(12, 2)
  taxAmount      Decimal @default(0) @db.Decimal(12, 2)
  discountAmount Decimal @default(0) @db.Decimal(12, 2)
  totalAmount    Decimal @db.Decimal(12, 2)

  // Payment details
  amountPaid   Decimal @default(0) @db.Decimal(12, 2)
  amountDue    Decimal @default(0) @db.Decimal(12, 2)
  changeAmount Decimal @default(0) @db.Decimal(12, 2)

  // Sale metadata
  status         SaleStatus @default(DRAFT)
  notes          String?
  receiptPrinted Boolean    @default(false)

  // Tracking
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  cancelledAt DateTime?

  // Relations
  customer Customer?  @relation(fields: [customerId], references: [id])
  cashier  User       @relation(fields: [cashierId], references: [id])
  items    SaleItem[]
  payments Payment[]

  @@map("sales")
}

model SaleItem {
  id                 String  @id @default(cuid())
  saleId             String
  productId          String
  productVariationId String?

  // Item details
  quantity       Int
  unitPrice      Decimal @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  totalPrice     Decimal @db.Decimal(12, 2)

  // Cost tracking (for profit calculation)
  unitCost  Decimal @db.Decimal(10, 2)
  totalCost Decimal @db.Decimal(12, 2)

  // Item metadata
  notes           String?
  isConsignment   Boolean  @default(false)
  consignmentRate Decimal? @db.Decimal(5, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sale             Sale              @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product          Product           @relation(fields: [productId], references: [id])
  productVariation ProductVariation? @relation(fields: [productVariationId], references: [id])

  @@map("sale_items")
}

// ==========================================
// PAYMENT MANAGEMENT
// ==========================================

model Payment {
  id     String        @id @default(cuid())
  saleId String?
  amount Decimal       @db.Decimal(12, 2)
  method PaymentMethod
  status PaymentStatus @default(PENDING)

  // Payment method specific data
  transactionId   String? @unique // For mobile money/bank transfers
  referenceNumber String? // Internal reference
  momoPhoneNumber String? // For mobile money payments
  bankAccount     String? // For bank transfers

  // Mobile Money specific
  momoRequestId String? // MTN MoMo request ID
  momoStatus    String? // MTN MoMo transaction status

  // Change tracking (for cash payments)
  changeGiven  Decimal?       @db.Decimal(12, 2)
  changeMethod PaymentMethod? // How change was given (CASH or MOBILE_MONEY)

  // Metadata
  notes         String?
  receiptNumber String?
  processedAt   DateTime?

  // Tracking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sale Sale? @relation(fields: [saleId], references: [id])

  @@map("payments")
}

// ==========================================
// INVENTORY MANAGEMENT
// ==========================================

model InventoryMovement {
  id         String       @id @default(cuid())
  productId  String
  type       MovementType
  quantity   Int // Positive for IN, Negative for OUT
  unitPrice  Decimal?     @db.Decimal(10, 2)
  totalValue Decimal?     @db.Decimal(12, 2)

  // Reference details
  referenceType TransactionType?
  referenceId   String? // Sale ID, Purchase Order ID, etc.

  // Movement details
  reason String?
  notes  String?

  // Stock levels after movement
  stockBefore Int
  stockAfter  Int

  // Tracking
  createdAt DateTime @default(now())
  createdBy String?

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("inventory_movements")
}

model PurchaseOrder {
  id          String @id @default(cuid())
  orderNumber String @unique
  supplierId  String

  // Order details
  subtotal    Decimal @db.Decimal(12, 2)
  taxAmount   Decimal @default(0) @db.Decimal(12, 2)
  totalAmount Decimal @db.Decimal(12, 2)

  // Order status
  status       String    @default("PENDING") // PENDING, ORDERED, RECEIVED, CANCELLED
  orderDate    DateTime  @default(now())
  expectedDate DateTime?
  receivedDate DateTime?

  // Metadata
  notes String?

  // Tracking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  supplier Supplier            @relation(fields: [supplierId], references: [id])
  items    PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String @id @default(cuid())
  purchaseOrderId String
  productId       String

  // Item details
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(12, 2)

  // Receiving details
  quantityReceived Int       @default(0)
  receivedAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

// ==========================================
// SYSTEM & AUDIT
// ==========================================

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  action       String // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  resourceType String // USER, PRODUCT, SALE, etc.
  resourceId   String?
  oldValues    Json?
  newValues    Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("STRING") // STRING, NUMBER, BOOLEAN, JSON
  category    String   @default("GENERAL")
  description String?
  isPublic    Boolean  @default(false) // Can be accessed by frontend
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// ==========================================
// DAILY OPERATIONS
// ==========================================

model DailyReport {
  id   String   @id @default(cuid())
  date DateTime @unique @db.Date

  // Sales summary
  totalSales         Decimal @db.Decimal(12, 2)
  totalTransactions  Int
  averageTransaction Decimal @db.Decimal(10, 2)

  // Payment method breakdown
  cashSales   Decimal @db.Decimal(12, 2)
  momoSales   Decimal @db.Decimal(12, 2)
  bankSales   Decimal @db.Decimal(12, 2)
  creditSales Decimal @db.Decimal(12, 2)

  // Opening/Closing balances
  openingCash Decimal @db.Decimal(12, 2)
  closingCash Decimal @db.Decimal(12, 2)
  openingMomo Decimal @db.Decimal(12, 2)
  closingMomo Decimal @db.Decimal(12, 2)

  // Generated data
  generatedAt DateTime @default(now())
  generatedBy String?

  @@map("daily_reports")
}
