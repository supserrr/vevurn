#!/usr/bin/env node

/**
 * Test script to verify the improved Google OAuth profile mapping logic
 * This simulates different Google profile scenarios to ensure robust name extraction
 */

console.log('🔍 Testing Google OAuth Profile Mapping Logic');
console.log('='.repeat(50));

// Simulate the improved mapProfileToUser function
function mapProfileToUser(profile) {
  console.log('Google profile received:', JSON.stringify(profile, null, 2));
  
  // Extract names with multiple fallback strategies
  let firstName = '';
  let lastName = '';
  
  // Strategy 1: Use Google's structured name fields
  if (profile.given_name) {
    firstName = profile.given_name.trim();
  }
  if (profile.family_name) {
    lastName = profile.family_name.trim();
  }
  
  // Strategy 2: Parse full name if structured fields are missing
  if (!firstName && profile.name) {
    const nameParts = profile.name.trim().split(' ');
    firstName = nameParts[0] || '';
    lastName = nameParts.slice(1).join(' ') || '';
  }
  
  // Strategy 3: Use email prefix as absolute fallback
  if (!firstName && profile.email) {
    const emailPrefix = profile.email.split('@')[0];
    firstName = emailPrefix.replace(/[^a-zA-Z]/g, '') || 'User';
  }
  
  // Strategy 4: Ensure we always have valid names
  if (!firstName.trim()) firstName = 'User';
  if (!lastName.trim()) lastName = 'Account';
  
  const mappedUser = {
    firstName: firstName.trim(),
    lastName: lastName.trim(),
    name: profile.name || `${firstName} ${lastName}`.trim(),
    email: profile.email,
    image: profile.picture,
    // POS-specific defaults for Google OAuth users
    role: 'cashier',
    isActive: true,
    maxDiscountAllowed: 0,
    canSellBelowMin: false,
    employeeId: null, // Will be generated by backend logic
  };
  
  console.log('Mapped user data:', JSON.stringify(mappedUser, null, 2));
  return mappedUser;
}

// Test cases simulating different Google profile scenarios
const testCases = [
  {
    name: 'Complete Google Profile (ideal case)',
    profile: {
      given_name: 'John',
      family_name: 'Doe',
      name: 'John Doe',
      email: 'john.doe@gmail.com',
      picture: 'https://lh3.googleusercontent.com/profile-pic'
    }
  },
  {
    name: 'Missing structured names, full name available',
    profile: {
      name: 'Jane Smith',
      email: 'jane.smith@gmail.com',
      picture: 'https://lh3.googleusercontent.com/profile-pic'
    }
  },
  {
    name: 'Single name only',
    profile: {
      name: 'Alice',
      email: 'alice@gmail.com',
      picture: 'https://lh3.googleusercontent.com/profile-pic'
    }
  },
  {
    name: 'Only email available (worst case)',
    profile: {
      email: 'bob123@gmail.com'
    }
  },
  {
    name: 'Complex name with multiple parts',
    profile: {
      given_name: 'Maria',
      family_name: 'Garcia Lopez',
      name: 'Maria Garcia Lopez',
      email: 'maria.garcia@gmail.com'
    }
  },
  {
    name: 'Email with numbers and special chars',
    profile: {
      email: 'user123.test@gmail.com'
    }
  }
];

// Run all test cases
testCases.forEach((testCase, index) => {
  console.log(`\n📝 Test ${index + 1}: ${testCase.name}`);
  console.log('-'.repeat(40));
  
  try {
    const result = mapProfileToUser(testCase.profile);
    
    // Validate results
    const hasValidNames = result.firstName && result.lastName;
    const hasEmail = result.email;
    
    console.log(`✅ Result: ${hasValidNames ? 'PASS' : 'FAIL'} - Names: "${result.firstName}" "${result.lastName}"`);
    
    if (!hasValidNames) {
      console.log('❌ CRITICAL: Missing required firstName or lastName');
    }
    
  } catch (error) {
    console.log(`❌ ERROR: ${error.message}`);
  }
});

console.log('\n🎯 Test Summary:');
console.log('- All test cases should result in valid firstName and lastName');
console.log('- No empty strings should be returned for required fields');
console.log('- Fallback mechanisms should prevent "First_name_and_last_name_are_required" errors');
console.log('\n✅ If all tests show PASS, the Google OAuth fix should work correctly!');
